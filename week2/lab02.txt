== Question 1: Searching a Dictionary with Less ==

a) What word is on line 2000

Less keystrokes:2000G
Word:Algonquian

b) the first word in the dictionary file containing z

Less keystrokes:g /z
Word:Abkhaz

c) the last word in the dictionary that contains the substring ooz ?

Less keystrokes:?ooz
Word:G zoozoos


== Question 2: Applying  Unix Tools to a Dictionary ==

a) How many total words does the file contain?

Command:wc -w < words.txt
Answer:390582

b) How many total words, excluding those ending in "'s", are there in the dictionary?

Pipeline:egrep -iv ".*'s$" < words.txt | wc -w
Answer:299845

c) How could you use cat -n and grep to find out which word is on line 100000?

Pipeline:cat -n words.txt | grep "^\s*100000\s"
Answer:adviser

d) How could you use cat -n and grep to print the 700th line, and no other lines?

Pipeline: cat -n words.txt | grep "^\s*700\s"
Answer:	Adirondack

e) How do you use head and tail to find out what word is on line 200000

Pipeline:head -n 200000 < words.txt | tail -n 1
Answer:geodynamics's

== Question 3: Finding Unusual Words With Regular Expressions ==

a) which words contain the characters "lmn" consecutively?

Pipeline:grep -i "lmn" < words.txt
Answer:
Selmner
Selmner's
almner
almners
calmness
calmness's
calmnesses

b) how many words contain "zz", but do not end in apostrophe-s ('s)?

Pipeline: egrep -i ".*zz.*"  < words.txt | grep -iv ".*'s$" | wc -w
Answer:628

c) how many words contain four consecutive vowels?

Pipeline:egrep -i "[aeiou]{4}" < words.txt | wc -w
Answer:207

d) which English words contain all 5 english vowels "aeiou" in that order?

Pipeline:egrep -i "a.*e.*i.*o.*u" < words.txt

e) how many English words contain all 5 english vowels "aeiou" in that order?

Pipeline:egrep -i "aeiou" < words.txt | wc -w
Answer: 53

f) Challenge which English words contain exactly 5 vowels and the vowels are "aeiou" in that order?

Pipeline: egrep -i "a[^aeiou]*e[^aeiou]*i[^aeiou]*o[^aeiou]*u" < words.txt
Answer:
abstemious
abstemiously
abstemiousness
abstemiousness's
abstemiousnesses
abstentious
arsenious
caesious
facetious
facetiously
facetiousness
facetiousness's
facetiousnesses
ultraserious

g) How many 10+ letter lower case words which contain a 9 character lower-case word.

Pipeline:fgrep -f words9.txt words.txt | egrep ".{10,}" | wc -w
Answer:39541

== Question 4: egreping MPs ==

a) Write an egrep command that will print all the lines in the file where the electorate begins with W.

Pipeline:egrep -i "^.*: Member for W.*$" < parliament.txt

b) Write an egrep command that will list all the lines in the file where the MP's first name is Andrew.

Pipeline:egrep -i "^([a-z]* )*Andrew" < parliament.txt

c) Write an egrep command that will print all the lines in the file where the MP's surname (last name) ends in the letter 'y'.

Pipeline:egrep -i ".*y:" < parliament.txt

d) Write an egrep command that will print all the lines in the file where the last name and electorate ends in the letter 'y'.

Pipeline:egrep -i ".*y:.*y," < parliament.txt

e) Write an egrep command that will print all the lines in the file where the last name or electorate ends in the letter 'y'.

Pipeline:egrep -i ".*y(:|,)" < parliament.txt

f) Write an egrep command to print all the lines in the file where there is a word in the MP's name or the electorate name ending in ng.

Pipeline:egrep -i ".*ng(:|,)" < parliament.txt

g) Write an egrep command that will print all the lines in the file where the MP's surname (last name) both begins and ends with a vowel.

Pipeline:egrep -i " [aeiou][a-z]+[aeiou]:" < parliament.txt

h) Write an egrep command that will print all the lines in the file where the electorate name contains multiple words (separated by spaces or hyphens).

Pipeline:egrep -i ": Member for [a-z]+( |-)[a-z]+," < parliament.txt
Answer:
Hon Mark Butler: Member for Port Adelaide, South Australia
Hon Michael Danby: Member for Melbourne Ports, Victoria
Hon Barnaby Joyce: Member for New England, New South Wales
The Hon Dr Mike Kelly AM: Member for Eden-Monaro, New South Wales
Mr Llew O'Brien: Member for Wide Bay, Queensland
Hon Matt Thistlethwaite: Member for Kingsford Smith, New South Wales
Mr Jason Wood: Member for La Trobe, Victoria
Mr Trent Zimmerman: Member for North Sydney, New South Wales

== Question 5: Pipelining MPs ==

a) Write a shell pipeline which prints the 8 Australians states & territory
in order of the number of MPs they have.

Pipeline:sed  -e "s/^.*, \(.*\)$/\1/g" < parliament.txt | sort | uniq -c | sort -n | grep -io "[a-z][a-z ]*$"

b) Challenge: write a shell pipeline which prints the 2nd most common MP first name.

Pipeline:sed -re 's/^(Hon |Mr |Mrs |The |Ms |Dr )([a-zA-Z]+).*$/\2/g' < parliament.txt | sort | uniq -c | sort -nr | head -n 2 | tail -n 1 | grep -io "[a-zA-z]*"
Answer: Tony

== Question 6: Counting Classes ==

a) How many total classes are there?

Command: wc -l < classes.txt

b) How many different courses have classes?

Pipeline: sed -e 's/^\([A-Z]*[0-9]*\).*$/\1/' < classes.txt | sort | uniq | wc -l

c) Write a pipeline which will print the course with the most classes?

Pipeline:sed -e 's/^\([A-Z]*[0-9]*\).*$/\1/' < classes.txt | sort | uniq -c | sort -nr | head -n 1

d) Give a command line that prints the most frequently-used tut room?

Pipeline:egrep '(TUT|TLB)' < classes.txt | cut -f 5 | sort | uniq -c | sort -nr | head -n 1

e) Give a command line that prints the most popular time-of-day for tutes?

Pipeline:egrep '(TUT|TLB)' < classes.txt | cut -f 4 | cut -d' ' -f 2 | sort | uniq -c | sort -nr | head -n 1

f)  Challenge: which COMP courses run the most simultaneous classes of the same type?

Pipeline:egrep '^COMP' < classes.txt | cut -f 3,4 | sort | uniq -c | sort -nr | head -n 1

g) Challenge: write a pipeline that prints list of the course names (only) of COMP courses that run simultaneous classes of the same type?

Pipeline:egrep '^COMP' < classes.txt | cut -f 1,3,4 | sort | uniq -c | egrep '^\s*[2-9]' | cut -f 1 | sed 's/\s*//' | cut -d' ' -f 2 |uniq

== Question 7: Challenge - Interesting Regexps ==

a) Match any line containing at least one A and at least one B.

Regexp:(A[^AB]*B|B[^AB]*A)

b) Match any line any line containing only the characters A and B such that all pairs of adjacent As occur before any pairs of adjacent Bs

pipeline: egrep '^[AB]+$' < test.txt | egrep -v 'BB.*AA'
Regexp:

c) Match any line containing  only the characters A and B such that all number of A's is divisible by 4.

Regexp:^(AB*AB*AB*AB*)*$

d) Match any line containing n As followed by n Bs and no other characters..

Regexp/script:
